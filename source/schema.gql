# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

input AddTicketInput {
  title: String!
  genre: [String!]!
  price: Float!
  inventory: Int!
  imageUrl: String!
  date: DateTime!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type Edge {
  cursor: String!
  node: Ticket!
}

type Movie {
  _id: ObjectId!
  title: String!
  year: Int!
  rated: String
  released: DateTime
  runtime: Int!
  genre: [String!]!
  director: String!
  writers: [String!]!
  actors: [String!]!
  plot: String!
  language: String!
  country: String!
  awards: [String!]
  posterUrl: String
  ratings: [Rating!]
  metascore: Int
  imdbRating: Float
  imdbVotes: Int
  imdbID: String!
  dvdReleased: DateTime
  boxOffice: Int
  production: String
  website: String
}

type Mutation {
  addTicket(input: AddTicketInput!): Ticket!
}

"""Mongo object id scalar type"""
scalar ObjectId

type PageInfo {
  hasNextPage: Boolean!
}

type PaginatedResults {
  pageInfo: PageInfo!
  edges: [Edge!]!
}

type Query {
  ticket(input: TicketInput!): Ticket
  listTickets(first: Int, hasMovieData: Boolean, after: String): PaginatedResults!
}

type Rating {
  source: String!
  value: String!
}

type Subscription {
  initializeTickets: TicketSubscription!
}

type Ticket {
  _id: ObjectId!
  title: String!
  genre: [String!]!
  price: Float!
  inventory: Int!
  imageUrl: String!
  date: DateTime!
  movie: Movie
}

input TicketInput {
  id: ObjectId!
}

type TicketSubscription {
  tickets: [Ticket!]
}
